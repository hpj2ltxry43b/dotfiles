#!/usr/bin/env python
import importlib.util
import os
import sys

DOTDIR = os.path.expanduser('~/dotfiles')
def message(msg):
    print(f'- {msg}')

def warning(msg):
    print(f'! {msg}')

def error(msg):
    print(f'!! {msg}')
    sys.exit(1)

applyers = {}
for applyer in os.listdir('./applies'):
    if applyer.endswith('.py'):
        spec = importlib.util.spec_from_file_location(applyer, './applies/' + applyer)
        module = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(module)
        applyers[applyer] = module
        message(f'Imported applyer {applyer}')

for applyern, applyer in applyers.items():
    if not hasattr(applyer, 'apply'):
        error(f'Applyer \'{applyern}\' does not have attribute \'apply\'')

    if not callable(applyer.apply):
        error(f'Applyer \'{applyern}\' has attr \'apply\' but is not callable')

    if not hasattr(applyer, 'verify'):
        error(f'Applyer \'{applyern}\' does not have attribute \'verify\'')

    if not callable(applyer.verify):
        error(f'Applyer \'{applyern}\' has attr \'verify\' but is not callable')

schemes = {}
for scheme in os.listdir('./schemes'):
    if scheme.endswith('.py'):
        spec = importlib.util.spec_from_file_location(scheme, './schemes/' + scheme)
        module = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(module)
        schemes[scheme] = module
        message(f'Imported color scheme {scheme}')

for schemen, scheme in schemes.items():
    for applyern, applyer in applyers.items():
        if not applyer.verify(scheme):
            error(f'Scheme \'{schemen}\' failed applyer check of \'{applyern}\'')

if len(sys.argv) != 2:
    message('Valid schemes are:')

    for schemen in schemes.keys():
        message(schemen)

    sys.exit(1)

chosen = sys.argv[1]

if not chosen.endswith('.py'):
    chosen += '.py'

if chosen not in schemes:
    message('Valid schemes are:')

    for schemen in schemes.keys():
        message(schemen)

    sys.exit(1)

for applyern, applyer in applyers.items():
    applyer.apply(schemes[chosen], DOTDIR)
    message(f'Applyer {applyern} applied scheme {chosen}')
